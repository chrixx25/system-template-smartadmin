//insert
form_sample.on('submit', function(e)
{
    e.preventDefault();

    const form = form_sample; // remove if not using form data
    const form_data = new FormData( form[0] ); // remove if not using form data
    const record = 'employee';

    form.btnSubmit();
    form.validateSubmit();

    if(form.formName('username') && form.formName('username').length < 8)
        error_counter = [{name: 'username', message: 'Minimun of 8 characters.'}, ...error_counter];

    if(error_counter.length > 0)
    {
        error_counter.map(({name, message}) =>
        {
            form.isInvalid(name, message);
        });

        form.btnSubmit(false);

        return false;
    }

    $.confirm({
        title: `Add ${record}`
        , content: `Do you want to add this ${record}?`
        , type: 'green'
        , icon: 'fa fa-question-circle-o'
        , buttons: {
            btn_confirm: {
                text: "submit"
                , btnClass: "btn-success"
                , action: function()
                {
                    this.buttons.btn_confirm.setText('<i class="fas fa-spinner fa-spin"></i><span> submitting');
                    this.buttons.btn_confirm.disable();

                    $.ajax({
                        url: API('api-url')
                        , method: 'POST'
                        , processData: false // remove if not using form data
                        , contentType: false // remove if not using form data
                        , headers:
                        {
                            Authorization: token
                        }
                        , data: form_data // remove if not using form data
                        , //data: { sample: form.formName('sample'), sample1: form.formName('sample2') } // use this if not using form data
                    }).then(({data}) =>
                    {
                        //append new data
                        data_sample = [data, ...data_sample];
                        //reload data
                        data_sample.Sample.load(data_sample, false, 1);

                        form.btnSubmit(false);
                        modal_sample.modal('hide');
                        this.close();

                        toastr["success"](`${ucwords(record)} successfully added`);
                    }).fail((err) =>
                    {
                        this.buttons.btn_confirm.setText('Submit');
                        this.buttons.btn_confirm.enable();
                        error(err);
                    });

                    return false;
                }
            },
            btn_cancel: {
                text: 'cancel'
                , action: function()
                {
                    form.btnSubmit(false);
                }
            },
        }
    });
});

//update
form_sample.on('submit', function(e)
{
    e.preventDefault();

    const form = form_sample; // remove if not using form data
    const form_data = new FormData( form[0] ); // remove if not using form data
    const record = 'employee';

    form_data.append('id', id); // remove if not using form data

    form.btnSubmit();
    form.validateSubmit();

    if(form.formName('username') && form.formName('username').length < 8)
        error_counter = [{name: 'username', message: 'Minimun of 8 characters.'}, ...error_counter];

    if(error_counter.length > 0)
    {
        error_counter.map(({name, message}) =>
        {
            form.isInvalid(name, message);
        });

        form.btnSubmit(false);

        return false;
    }

    $.confirm({
        title: `Update ${record}`
        , content: `Do you want to update this ${record}?`
        , type: 'green'
        , icon: 'fal fa-question-circle'
        , buttons: {
            btn_confirm: {
                text: "submit"
                , btnClass: "btn-success"
                , action: function()
                {
                    this.buttons.btn_confirm.setText('<i class="fas fa-spinner fa-spin"></i><span> submitting');
                    this.buttons.btn_confirm.disable();

                    $.ajax({
                        url: API('api-url')
                        , method: 'POST'
                        , processData: false // remove if not using form data
                        , contentType: false // remove if not using form data
                        , headers:
                        {
                            Authorization: token
                        }
                        , data: form_data // remove if not using form data
                        , //data: { sample: form.formName('sample'), sample1: form.formName('sample2') } // use this if not using form data
                    }).then(({data}) =>
                    {
                        //update data on object
                        data_sample = data_sample.map(t => (t.id === data.id ? data : t));
                        //reload data
                        dt_table.Sample.load(data_sample, false, 1);

                        form.btnSubmit(false);
                        modal_sample.modal('hide');
                        this.close();

                        toastr["success"](`${ucwords(record)} successfully updated`);
                    }).fail((err) =>
                    {
                        this.buttons.btn_confirm.setText('Submit');
                        this.buttons.btn_confirm.enable();
                        error(err);
                    });

                    return false;
                }
            },
            btn_cancel: {
                text: 'cancel'
                , action: function()
                {
                    form.btnSubmit(false);
                }
            },
        }
    });
});

//delete
dt_table.on('click','button.btn-delete', function(e)
{
    e.preventDefault();

    const this_row = $(this).parents('tr');
    const record = 'employee';

    let id = this_row.data('id');

    $.confirm({
        title: 'Delete'
        , content: `Do you want to delete this ${record}?`
        , type: 'red'
        , icon: 'fal fa-question-circle'
        , buttons: {
            btn_confirm: {
                text: "Delete"
                , btnClass: "btn-red"
                , action: function()
                {
                    this.buttons.btn_confirm.setText('<i class="fas fa-spinner fa-spin"></i><span> deleting');
                    this.buttons.btn_confirm.disable();

                    $.ajax({
                        url: API(`api-url/${id}`)
                        , headers: { Authorization: token }
                        , method: 'DELETE'
                    }).then(data =>
                    {
                        data_sample = data_sample.filter(t => t.id !== id);

                        dt_level_role.Sample.load(data_sample, false, -1);

                        this.close();

                        toastr["success"](`${ucwords(record)} successfully deleted`);
                    }).fail((err) => error(err));

                    return false;
                }
            },
            btn_cancel: {
                text: 'cancel'
                , action: function()
                {

                }
            }
        }
    });
});

//error alerts
$.alert({
    title: 'Ops!'
    , content: 'error massage'
    , type: 'red'
    , icon: "fal fa-times-circle"
});

//confirm
$.confirm({
    title: 'Add employee'
    , content: 'Do you want to add this employee?'
    , type: 'green'
    , icon: 'fal fa-question-circle'
    , buttons: {
        btn_confirm: {
            text: "submit"
            , btnClass: "btn-success"
            , action: function()
            {
                this.buttons.btn_confirm.setText('<i class="fas fa-spinner fa-spin"></i><span> submitting');
                this.buttons.btn_confirm.disable();

                setTimeout(() => {
                    modal_employee.modal('hide');
                    this.close();

                    toastr["success"]("employee successfully added.");
                }, 3000);

                return false;
            }
        },
            btn_cancel: {
            text: 'cancel'
            , action: function()
            {
                this.close();
            }
        },
    }
});

$.confirm({
    content: function(){
        let self = this;
        self.setContent('Checking callback flow');
        return $.ajax({
            url: 'bower.json',
            dataType: 'json',
            method: 'get'
        }).done(function (response) {
            self.setContentAppend('<div>Done!</div>');
        }).fail(function(){
            self.setContentAppend('<div>Fail!</div>');
        }).always(function(){
            self.setContentAppend('<div>Always!</div>');
        });
    },
    contentLoaded: function(data, status, xhr)
    {
        self.setContentAppend('<div>Content loaded!</div>');
    },
    onContentReady: function()
    {
        this.setContentAppend('<div>Content ready!</div>');
    }
});

$.confirm({
    content: function()
    {
        var self = this;

        self.setContent('Checking callback flow');

        return $.ajax({
            url: 'bower.json',
            dataType: 'json',
            method: 'get'
        }).done(function (response) {
            self.setContentAppend('<div>Done!</div>');
        }).fail(function(){
            self.setContentAppend('<div>Fail!</div>');
        }).always(function(){
            self.setContentAppend('<div>Always!</div>');
        });
    },
    contentLoaded: function(data, status, xhr)
    {
        self.setContentAppend('<div>Content loaded!</div>');
    },
    onContentReady: function()
    {
        this.setContentAppend('<div>Content ready!</div>');
    }
});

//select2
if ($('#mySelect2').hasClass("select2-hidden-accessible"))
{
    // Select2 has been initialized
}

